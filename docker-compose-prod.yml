version: "3.9"
services:
  traefik:
    image: "traefik:v2.3"
    container_name: "traefik"
    restart: always
    command:
      #- "--log.level=DEBUG"
      #- "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      # - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=com@flipdot.org"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
  redis:
    image: redis
    restart: always
    volumes:
      -  dbvolume:/data
  postgres:
    image: postgres
    restart: always
    volumes:
      - pgvolume:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
  gameserver:
    build: gameserver
    restart: always
    depends_on:
      - redis
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - default
      - gamenet
  webserver:
    build: webserver
    restart: always
    depends_on:
      - redis
    env_file:
      - webserver.env
    environment:
      WEBSERVER_API_KEY: $WEBSERVER_API_KEY
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.webserver.rule=Host(`waboorrt.flipdot.org`)"
      - "traefik.http.routers.webserver.entrypoints=websecure"
      - "traefik.http.routers.webserver.tls.certresolver=myresolver"
  gitserver:
    build: gitserver
    restart: always
    ports:
      - "2222:2222"
    volumes:
      - git-repos:/app/repos
      - git-keys:/app/keys
    depends_on:
      - webserver
    environment:
      WEBSERVER_API_KEY: $WEBSERVER_API_KEY
      WEBSERVER_HOST: webserver
  botbuilder:
    build: botbuilder 
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - redis
  scoreserver:
    build: scoreserver
    restart: always
    depends_on:
      - gameserver
      - redis

networks:
  gamenet:
    internal: true

volumes:
  git-repos:
  git-keys:
  dbvolume:
  letsencrypt:
  pgvolume:
